---
- name: Download and install Containerd
  block:
    # Suivant exactement la documentation officielle
    - name: Update APT package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Ensure ca-certificates and curl are installed
      apt:
        name:
          - ca-certificates
          - curl
        state: present

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker's official GPG key
      command: >
        curl -fsSL https://download.docker.com/linux/debian/gpg 
        -o /etc/apt/keyrings/docker.asc

    - name: Set permissions for GPG key
      file:
        path: /etc/apt/keyrings/docker.asc
        mode: 'a+r'

    - name: Get Debian version
      shell: . /etc/os-release && echo "$VERSION_CODENAME"
      register: debian_version
      changed_when: false
      check_mode: no

    - name: Get architecture
      shell: dpkg --print-architecture
      register: architecture
      changed_when: false
      check_mode: no

    - name: Add Docker repository to APT sources
      shell: >
        echo "deb [arch={{ architecture.stdout }} signed-by=/etc/apt/keyrings/docker.asc] 
        https://download.docker.com/linux/debian {{ debian_version.stdout }} stable" | 
        tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update APT cache after adding repository
      apt:
        update_cache: yes
      register: apt_update
      until: apt_update is not failed
      retries: 5
      delay: 10

    - name: Install containerd.io
      apt:
        name: containerd.io
        state: present
      register: containerd_install

    # Configuration de containerd
    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd config
      shell: containerd config default
      register: default_config
      changed_when: false
      check_mode: no

    - name: Configure containerd
      copy:
        content: "{{ default_config.stdout }}"
        dest: /etc/containerd/config.toml
        mode: '0644'
      register: config_written
      when: containerd_install.changed or not ansible_check_mode

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
        enabled: yes
      when: config_written.changed or containerd_install.changed

- name: Download and install CNI plugins
  block:
    - name: Create directory for CNI plugins
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'

    - name: Check if CNI plugins are already installed
      find:
        paths: /opt/cni/bin
        file_type: file
        patterns: "*"
      register: cni_files

    - name: Set CNI plugin URL
      set_fact:
        cni_url: "https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}-v1.2.0.tgz"

    - name: Download CNI plugins
      get_url:
        url: "{{ cni_url }}"
        dest: /tmp/cni-plugins.tgz
        mode: '0644'
      register: download_cni
      until: download_cni is not failed
      retries: 5
      delay: 10
      when: cni_files.matched == 0

    - name: Extract CNI plugins
      unarchive:
        src: /tmp/cni-plugins.tgz
        dest: /opt/cni/bin
        remote_src: yes
      when: cni_files.matched == 0

    - name: Remove downloaded archive
      file:
        path: /tmp/cni-plugins.tgz
        state: absent
      when: download_cni.changed | default(false)


- name: Setup Systemd service for containerd
  block:
        # Configuration de systemd pour containerd sur Debian
    - name: Ensure directory for systemd unit files exists
      file:
        path: /usr/local/lib/systemd/system/
        state: directory
        mode: '0755'
        recurse: yes

    - name: Check if containerd systemd service file exists
      stat:
        path: /usr/local/lib/systemd/system/containerd.service
      register: service_file_check

    - name: Download containerd systemd service file
      get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /usr/local/lib/systemd/system/containerd.service
        mode: '0644'
      register: service_file_download
      when: not service_file_check.stat.exists

    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Check if containerd config exists
      stat:
        path: /etc/containerd/config.toml
      register: config_exists

    - name: Generate default containerd config
      command: containerd config default
      register: default_config
      changed_when: false
      when: not config_exists.stat.exists

    - name: Create temporary file for config
      tempfile:
        state: file
        suffix: config.toml
      register: temp_config
      when: not config_exists.stat.exists

    - name: Write default config to temporary file
      copy:
        content: "{{ default_config.stdout }}"
        dest: "{{ temp_config.path }}"
      when: not config_exists.stat.exists

    - name: Set systemd cgroup driver in containerd config
      replace:
        path: "{{ temp_config.path if not config_exists.stat.exists else '/etc/containerd/config.toml' }}"
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
      register: cgroup_updated
      when: temp_config.path is defined or config_exists.stat.exists

    - name: Write final containerd config
      copy:
        src: "{{ temp_config.path }}"
        dest: /etc/containerd/config.toml
        remote_src: yes
        mode: '0644'
      when: not config_exists.stat.exists
      register: config_written

    - name: Remove temporary config file
      file:
        path: "{{ temp_config.path }}"
        state: absent
      when: temp_config.path is defined

    - name: Create systemd override directory
      file:
        path: /etc/systemd/system/containerd.service.d
        state: directory
        mode: '0755'

    - name: Create override file for containerd service
      copy:
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/containerd
        dest: /etc/systemd/system/containerd.service.d/override.conf
        mode: '0644'
      register: override_created

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      when: service_file_download.changed | default(false) or cgroup_updated.changed | default(false) or config_written.changed | default(false) or override_created.changed

    - name: Enable and start containerd service
      systemd:
        name: containerd
        state: restarted
        enabled: yes
      when: service_file_download.changed | default(false) or cgroup_updated.changed | default(false) or config_written.changed | default(false) or override_created.changed

    # Configuration de l'hôte pour utiliser le même cgroup driver
    - name: Check if kubelet is installed
      command: which kubelet
      register: kubelet_check
      changed_when: false
      failed_when: false
      check_mode: no

    - name: Create kubelet configuration directory
      file:
        path: /var/lib/kubelet/
        state: directory
        mode: '0755'
      when: kubelet_check.rc == 0

    - name: Create kubelet config file with systemd cgroup driver
      copy:
        dest: /var/lib/kubelet/config.yaml
        content: |
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          cgroupDriver: systemd
          resolvConf: /run/systemd/resolve/resolv.conf
        mode: '0644'
      when: kubelet_check.rc == 0
      register: kubelet_config

    - name: Restart kubelet if installed and config changed
      systemd:
        name: kubelet
        state: restarted
        enabled: yes
      when: kubelet_check.rc == 0 and kubelet_config.changed
      ignore_errors: yes